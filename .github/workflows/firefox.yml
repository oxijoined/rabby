name: Build Firefox Extension

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '–¢–∏–ø —Å–±–æ—Ä–∫–∏'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - pro
        - dev
      version_bump:
        description: '–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é'
        required: false
        default: false
        type: boolean
      create_release:
        description: '–°–æ–∑–¥–∞—Ç—å GitHub Release'
        required: false
        default: false
        type: boolean
      upload_to_amo:
        description: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ Firefox Add-ons'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
      - develop
      - 'firefox/**'
    paths:
      - 'src/**'
      - 'package.json'
      - 'webpack/**'
      - 'build/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'package.json'
      - 'webpack/**'
      - 'build/**'

env:
  NODE_OPTIONS: '--max_old_space_size=8192'

jobs:
  build-firefox:
    name: Build Firefox Extension
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      artifact-name: ${{ steps.create-artifacts.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'
          cache: 'yarn'

      - name: Setup NPM Token
        if: ${{ secrets.NPM_AUTH_TOKEN != '' }}
        uses: heisenberg-2077/use-npm-token-action@v1
        with:
          token: '${{ secrets.NPM_AUTH_TOKEN }}'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn cache clean

      - name: Get current version
        id: get-version
        run: |
          VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Bump version (if requested)
        if: ${{ inputs.version_bump == true }}
        run: |
          # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
          echo "Version bumped to: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set build type
        id: build-config
        run: |
          BUILD_TYPE="${{ inputs.build_type || 'debug' }}"
          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "Building $BUILD_TYPE version for Firefox"

      - name: Build Firefox extension
        run: |
          BUILD_TYPE="${{ steps.build-config.outputs.build_type }}"
          echo "Building Firefox MV2 extension with type: $BUILD_TYPE"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –¥–ª—è Firefox
          yarn build:${BUILD_TYPE}:mv2
          
          echo "Build completed successfully!"

      - name: Verify build output
        run: |
          echo "=== Checking build output ==="
          if [ -d "dist-mv2" ]; then
            echo "‚úÖ dist-mv2 directory exists"
            echo "üìÅ Contents:"
            ls -la dist-mv2/
            echo ""
            echo "üìÑ Manifest content:"
            cat dist-mv2/manifest.json | jq '.' 2>/dev/null || cat dist-mv2/manifest.json
          else
            echo "‚ùå dist-mv2 directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Create Firefox .xpi package
        id: create-artifacts
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          BUILD_TYPE="${{ steps.build-config.outputs.build_type }}"
          GIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
          XPI_NAME="rabby-firefox-${BUILD_TYPE}-v${VERSION}-${GIT_HASH}.xpi"
          XPI_NAME_SIMPLE="rabby-firefox-${BUILD_TYPE}-v${VERSION}.xpi"
          
          echo "Creating Firefox .xpi packages..."
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
          mkdir -p artifacts
          
          # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ .xpi (—ç—Ç–æ zip —Ñ–∞–π–ª)
          cd dist-mv2
          zip -r "../artifacts/$XPI_NAME" . -x "*.map" "*.md" "node_modules/*"
          zip -r "../artifacts/$XPI_NAME_SIMPLE" . -x "*.map" "*.md" "node_modules/*"
          cd ..
          
          # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ –æ–±—ã—á–Ω—ã–π zip –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
          ZIP_NAME="rabby-firefox-${BUILD_TYPE}-v${VERSION}-${GIT_HASH}-source.zip"
          cd dist-mv2
          zip -r "../artifacts/$ZIP_NAME" . -x "node_modules/*"
          cd ..
          
          echo "Created packages:"
          ls -la artifacts/
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
          echo ""
          echo "Package sizes:"
          du -h artifacts/*
          
          # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          echo "xpi_name=$XPI_NAME" >> $GITHUB_OUTPUT
          echo "xpi_simple=$XPI_NAME_SIMPLE" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "artifact-name=rabby-firefox-${BUILD_TYPE}-v${VERSION}" >> $GITHUB_OUTPUT

      - name: Test Firefox extension
        run: |
          echo "=== Testing Firefox extension ==="
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ manifest.json –≤–∞–ª–∏–¥–Ω—ã–π
          if ! cat dist-mv2/manifest.json | jq empty 2>/dev/null; then
            echo "‚ùå Invalid manifest.json"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
          REQUIRED_FILES=("manifest.json" "background.js" "popup.html")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "dist-mv2/$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ö†Ô∏è  $file missing (might be optional)"
            fi
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
          TOTAL_SIZE=$(du -s dist-mv2 | cut -f1)
          echo "Total extension size: ${TOTAL_SIZE}KB"
          
          if [ $TOTAL_SIZE -gt 102400 ]; then  # 100MB limit
            echo "‚ö†Ô∏è  Extension is quite large: ${TOTAL_SIZE}KB"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-artifacts.outputs.artifact-name }}
          path: |
            artifacts/
            dist-mv2/
          retention-days: 30

      - name: Upload to Firefox Add-ons (AMO)
        if: ${{ inputs.upload_to_amo == true && secrets.AMO_JWT_ISSUER != '' && secrets.AMO_JWT_SECRET != '' }}
        run: |
          echo "üöÄ Uploading to Firefox Add-ons..."
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º web-ext
          npm install -g web-ext
          
          # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ AMO
          cd dist-mv2
          web-ext sign \
            --api-key="${{ secrets.AMO_JWT_ISSUER }}" \
            --api-secret="${{ secrets.AMO_JWT_SECRET }}" \
            --channel=unlisted
          cd ..

      - name: Create GitHub Release
        if: ${{ inputs.create_release == true && github.event_name == 'workflow_dispatch' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: firefox-v${{ steps.get-version.outputs.version }}
          release_name: Firefox Extension v${{ steps.get-version.outputs.version }}
          body: |
            ü¶ä Rabby Firefox Extension v${{ steps.get-version.outputs.version }}
            
            **Build Type:** ${{ steps.build-config.outputs.build_type }}
            **Commit:** ${{ github.sha }}
            
            ## Installation
            1. Download the `.xpi` file
            2. Open Firefox
            3. Go to `about:debugging`
            4. Click "This Firefox" ‚Üí "Load Temporary Add-on"
            5. Select the downloaded `.xpi` file
            
            ## Changes
            - Built from commit ${{ github.sha }}
            - Firefox Manifest V2 compatible
            
            **Files:**
            - `rabby-firefox-*.xpi` - Ready to install extension
            - `rabby-firefox-*-source.zip` - Source files for review
          draft: false
          prerelease: ${{ steps.build-config.outputs.build_type == 'debug' || steps.build-config.outputs.build_type == 'dev' }}

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  firefox-compatibility-check:
    name: Firefox Compatibility Check
    runs-on: ubuntu-latest
    needs: build-firefox
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-firefox.outputs.artifact-name }}

      - name: Install Firefox and web-ext
        run: |
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Firefox
          sudo apt-get update
          sudo apt-get install -y firefox
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º web-ext –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          npm install -g web-ext

      - name: Validate extension
        run: |
          echo "üîç Validating Firefox extension..."
          
          if [ -d "dist-mv2" ]; then
            cd dist-mv2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é web-ext
            echo "Running web-ext lint..."
            web-ext lint || echo "Lint completed with warnings"
            
            echo "Running web-ext build..."
            web-ext build --overwrite-dest
            
            echo "‚úÖ Firefox extension validation completed"
          else
            echo "‚ùå dist-mv2 directory not found"
            exit 1
          fi

  # Notification –∑–∞–¥–∞—á–∞
  notify-completion:
    name: Notify Build Completion
    runs-on: ubuntu-latest
    needs: [build-firefox, firefox-compatibility-check]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.build-firefox.result == 'success' }}
        run: |
          echo "üéâ Firefox extension build completed successfully!"
          echo "Version: ${{ needs.build-firefox.outputs.version }}"
          echo "Artifact: ${{ needs.build-firefox.outputs.artifact-name }}"

      - name: Notify failure
        if: ${{ needs.build-firefox.result == 'failure' }}
        run: |
          echo "‚ùå Firefox extension build failed!"
          echo "Check the logs above for details."